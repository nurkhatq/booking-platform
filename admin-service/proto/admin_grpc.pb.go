// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: admin-service/proto/admin.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	AdminService_GetPendingTenants_FullMethodName     = "/admin.AdminService/GetPendingTenants"
	AdminService_ApproveTenant_FullMethodName         = "/admin.AdminService/ApproveTenant"
	AdminService_RejectTenant_FullMethodName          = "/admin.AdminService/RejectTenant"
	AdminService_SuspendTenant_FullMethodName         = "/admin.AdminService/SuspendTenant"
	AdminService_ReactivateTenant_FullMethodName      = "/admin.AdminService/ReactivateTenant"
	AdminService_GetTenantDetails_FullMethodName      = "/admin.AdminService/GetTenantDetails"
	AdminService_UpdateTenantTrial_FullMethodName     = "/admin.AdminService/UpdateTenantTrial"
	AdminService_GetPlatformStatistics_FullMethodName = "/admin.AdminService/GetPlatformStatistics"
	AdminService_GetTenantStatistics_FullMethodName   = "/admin.AdminService/GetTenantStatistics"
	AdminService_GetSystemHealth_FullMethodName       = "/admin.AdminService/GetSystemHealth"
	AdminService_GetSystemLogs_FullMethodName         = "/admin.AdminService/GetSystemLogs"
	AdminService_GetActiveUsers_FullMethodName        = "/admin.AdminService/GetActiveUsers"
	AdminService_GetSystemMetrics_FullMethodName      = "/admin.AdminService/GetSystemMetrics"
	AdminService_BulkUpdateTenants_FullMethodName     = "/admin.AdminService/BulkUpdateTenants"
	AdminService_ExportData_FullMethodName            = "/admin.AdminService/ExportData"
)

// AdminServiceClient is the client API for AdminService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AdminServiceClient interface {
	// Tenant Management
	GetPendingTenants(ctx context.Context, in *GetPendingTenantsRequest, opts ...grpc.CallOption) (*GetPendingTenantsResponse, error)
	ApproveTenant(ctx context.Context, in *ApproveTenantRequest, opts ...grpc.CallOption) (*ApproveTenantResponse, error)
	RejectTenant(ctx context.Context, in *RejectTenantRequest, opts ...grpc.CallOption) (*RejectTenantResponse, error)
	SuspendTenant(ctx context.Context, in *SuspendTenantRequest, opts ...grpc.CallOption) (*SuspendTenantResponse, error)
	ReactivateTenant(ctx context.Context, in *ReactivateTenantRequest, opts ...grpc.CallOption) (*ReactivateTenantResponse, error)
	GetTenantDetails(ctx context.Context, in *GetTenantDetailsRequest, opts ...grpc.CallOption) (*GetTenantDetailsResponse, error)
	UpdateTenantTrial(ctx context.Context, in *UpdateTenantTrialRequest, opts ...grpc.CallOption) (*UpdateTenantTrialResponse, error)
	// Platform Statistics
	GetPlatformStatistics(ctx context.Context, in *GetPlatformStatisticsRequest, opts ...grpc.CallOption) (*GetPlatformStatisticsResponse, error)
	GetTenantStatistics(ctx context.Context, in *GetTenantStatisticsRequest, opts ...grpc.CallOption) (*GetTenantStatisticsResponse, error)
	GetSystemHealth(ctx context.Context, in *GetSystemHealthRequest, opts ...grpc.CallOption) (*GetSystemHealthResponse, error)
	// System Management
	GetSystemLogs(ctx context.Context, in *GetSystemLogsRequest, opts ...grpc.CallOption) (*GetSystemLogsResponse, error)
	GetActiveUsers(ctx context.Context, in *GetActiveUsersRequest, opts ...grpc.CallOption) (*GetActiveUsersResponse, error)
	GetSystemMetrics(ctx context.Context, in *GetSystemMetricsRequest, opts ...grpc.CallOption) (*GetSystemMetricsResponse, error)
	// Bulk Operations
	BulkUpdateTenants(ctx context.Context, in *BulkUpdateTenantsRequest, opts ...grpc.CallOption) (*BulkUpdateTenantsResponse, error)
	ExportData(ctx context.Context, in *ExportDataRequest, opts ...grpc.CallOption) (*ExportDataResponse, error)
}

type adminServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAdminServiceClient(cc grpc.ClientConnInterface) AdminServiceClient {
	return &adminServiceClient{cc}
}

func (c *adminServiceClient) GetPendingTenants(ctx context.Context, in *GetPendingTenantsRequest, opts ...grpc.CallOption) (*GetPendingTenantsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetPendingTenantsResponse)
	err := c.cc.Invoke(ctx, AdminService_GetPendingTenants_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) ApproveTenant(ctx context.Context, in *ApproveTenantRequest, opts ...grpc.CallOption) (*ApproveTenantResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApproveTenantResponse)
	err := c.cc.Invoke(ctx, AdminService_ApproveTenant_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) RejectTenant(ctx context.Context, in *RejectTenantRequest, opts ...grpc.CallOption) (*RejectTenantResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RejectTenantResponse)
	err := c.cc.Invoke(ctx, AdminService_RejectTenant_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) SuspendTenant(ctx context.Context, in *SuspendTenantRequest, opts ...grpc.CallOption) (*SuspendTenantResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SuspendTenantResponse)
	err := c.cc.Invoke(ctx, AdminService_SuspendTenant_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) ReactivateTenant(ctx context.Context, in *ReactivateTenantRequest, opts ...grpc.CallOption) (*ReactivateTenantResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ReactivateTenantResponse)
	err := c.cc.Invoke(ctx, AdminService_ReactivateTenant_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) GetTenantDetails(ctx context.Context, in *GetTenantDetailsRequest, opts ...grpc.CallOption) (*GetTenantDetailsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTenantDetailsResponse)
	err := c.cc.Invoke(ctx, AdminService_GetTenantDetails_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) UpdateTenantTrial(ctx context.Context, in *UpdateTenantTrialRequest, opts ...grpc.CallOption) (*UpdateTenantTrialResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateTenantTrialResponse)
	err := c.cc.Invoke(ctx, AdminService_UpdateTenantTrial_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) GetPlatformStatistics(ctx context.Context, in *GetPlatformStatisticsRequest, opts ...grpc.CallOption) (*GetPlatformStatisticsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetPlatformStatisticsResponse)
	err := c.cc.Invoke(ctx, AdminService_GetPlatformStatistics_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) GetTenantStatistics(ctx context.Context, in *GetTenantStatisticsRequest, opts ...grpc.CallOption) (*GetTenantStatisticsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTenantStatisticsResponse)
	err := c.cc.Invoke(ctx, AdminService_GetTenantStatistics_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) GetSystemHealth(ctx context.Context, in *GetSystemHealthRequest, opts ...grpc.CallOption) (*GetSystemHealthResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetSystemHealthResponse)
	err := c.cc.Invoke(ctx, AdminService_GetSystemHealth_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) GetSystemLogs(ctx context.Context, in *GetSystemLogsRequest, opts ...grpc.CallOption) (*GetSystemLogsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetSystemLogsResponse)
	err := c.cc.Invoke(ctx, AdminService_GetSystemLogs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) GetActiveUsers(ctx context.Context, in *GetActiveUsersRequest, opts ...grpc.CallOption) (*GetActiveUsersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetActiveUsersResponse)
	err := c.cc.Invoke(ctx, AdminService_GetActiveUsers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) GetSystemMetrics(ctx context.Context, in *GetSystemMetricsRequest, opts ...grpc.CallOption) (*GetSystemMetricsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetSystemMetricsResponse)
	err := c.cc.Invoke(ctx, AdminService_GetSystemMetrics_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) BulkUpdateTenants(ctx context.Context, in *BulkUpdateTenantsRequest, opts ...grpc.CallOption) (*BulkUpdateTenantsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BulkUpdateTenantsResponse)
	err := c.cc.Invoke(ctx, AdminService_BulkUpdateTenants_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) ExportData(ctx context.Context, in *ExportDataRequest, opts ...grpc.CallOption) (*ExportDataResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ExportDataResponse)
	err := c.cc.Invoke(ctx, AdminService_ExportData_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AdminServiceServer is the server API for AdminService service.
// All implementations must embed UnimplementedAdminServiceServer
// for forward compatibility.
type AdminServiceServer interface {
	// Tenant Management
	GetPendingTenants(context.Context, *GetPendingTenantsRequest) (*GetPendingTenantsResponse, error)
	ApproveTenant(context.Context, *ApproveTenantRequest) (*ApproveTenantResponse, error)
	RejectTenant(context.Context, *RejectTenantRequest) (*RejectTenantResponse, error)
	SuspendTenant(context.Context, *SuspendTenantRequest) (*SuspendTenantResponse, error)
	ReactivateTenant(context.Context, *ReactivateTenantRequest) (*ReactivateTenantResponse, error)
	GetTenantDetails(context.Context, *GetTenantDetailsRequest) (*GetTenantDetailsResponse, error)
	UpdateTenantTrial(context.Context, *UpdateTenantTrialRequest) (*UpdateTenantTrialResponse, error)
	// Platform Statistics
	GetPlatformStatistics(context.Context, *GetPlatformStatisticsRequest) (*GetPlatformStatisticsResponse, error)
	GetTenantStatistics(context.Context, *GetTenantStatisticsRequest) (*GetTenantStatisticsResponse, error)
	GetSystemHealth(context.Context, *GetSystemHealthRequest) (*GetSystemHealthResponse, error)
	// System Management
	GetSystemLogs(context.Context, *GetSystemLogsRequest) (*GetSystemLogsResponse, error)
	GetActiveUsers(context.Context, *GetActiveUsersRequest) (*GetActiveUsersResponse, error)
	GetSystemMetrics(context.Context, *GetSystemMetricsRequest) (*GetSystemMetricsResponse, error)
	// Bulk Operations
	BulkUpdateTenants(context.Context, *BulkUpdateTenantsRequest) (*BulkUpdateTenantsResponse, error)
	ExportData(context.Context, *ExportDataRequest) (*ExportDataResponse, error)
	mustEmbedUnimplementedAdminServiceServer()
}

// UnimplementedAdminServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedAdminServiceServer struct{}

func (UnimplementedAdminServiceServer) GetPendingTenants(context.Context, *GetPendingTenantsRequest) (*GetPendingTenantsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPendingTenants not implemented")
}
func (UnimplementedAdminServiceServer) ApproveTenant(context.Context, *ApproveTenantRequest) (*ApproveTenantResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApproveTenant not implemented")
}
func (UnimplementedAdminServiceServer) RejectTenant(context.Context, *RejectTenantRequest) (*RejectTenantResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RejectTenant not implemented")
}
func (UnimplementedAdminServiceServer) SuspendTenant(context.Context, *SuspendTenantRequest) (*SuspendTenantResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SuspendTenant not implemented")
}
func (UnimplementedAdminServiceServer) ReactivateTenant(context.Context, *ReactivateTenantRequest) (*ReactivateTenantResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReactivateTenant not implemented")
}
func (UnimplementedAdminServiceServer) GetTenantDetails(context.Context, *GetTenantDetailsRequest) (*GetTenantDetailsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTenantDetails not implemented")
}
func (UnimplementedAdminServiceServer) UpdateTenantTrial(context.Context, *UpdateTenantTrialRequest) (*UpdateTenantTrialResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTenantTrial not implemented")
}
func (UnimplementedAdminServiceServer) GetPlatformStatistics(context.Context, *GetPlatformStatisticsRequest) (*GetPlatformStatisticsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPlatformStatistics not implemented")
}
func (UnimplementedAdminServiceServer) GetTenantStatistics(context.Context, *GetTenantStatisticsRequest) (*GetTenantStatisticsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTenantStatistics not implemented")
}
func (UnimplementedAdminServiceServer) GetSystemHealth(context.Context, *GetSystemHealthRequest) (*GetSystemHealthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSystemHealth not implemented")
}
func (UnimplementedAdminServiceServer) GetSystemLogs(context.Context, *GetSystemLogsRequest) (*GetSystemLogsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSystemLogs not implemented")
}
func (UnimplementedAdminServiceServer) GetActiveUsers(context.Context, *GetActiveUsersRequest) (*GetActiveUsersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetActiveUsers not implemented")
}
func (UnimplementedAdminServiceServer) GetSystemMetrics(context.Context, *GetSystemMetricsRequest) (*GetSystemMetricsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSystemMetrics not implemented")
}
func (UnimplementedAdminServiceServer) BulkUpdateTenants(context.Context, *BulkUpdateTenantsRequest) (*BulkUpdateTenantsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BulkUpdateTenants not implemented")
}
func (UnimplementedAdminServiceServer) ExportData(context.Context, *ExportDataRequest) (*ExportDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExportData not implemented")
}
func (UnimplementedAdminServiceServer) mustEmbedUnimplementedAdminServiceServer() {}
func (UnimplementedAdminServiceServer) testEmbeddedByValue()                      {}

// UnsafeAdminServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AdminServiceServer will
// result in compilation errors.
type UnsafeAdminServiceServer interface {
	mustEmbedUnimplementedAdminServiceServer()
}

func RegisterAdminServiceServer(s grpc.ServiceRegistrar, srv AdminServiceServer) {
	// If the following call pancis, it indicates UnimplementedAdminServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&AdminService_ServiceDesc, srv)
}

func _AdminService_GetPendingTenants_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPendingTenantsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).GetPendingTenants(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_GetPendingTenants_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).GetPendingTenants(ctx, req.(*GetPendingTenantsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_ApproveTenant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApproveTenantRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).ApproveTenant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_ApproveTenant_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).ApproveTenant(ctx, req.(*ApproveTenantRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_RejectTenant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RejectTenantRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).RejectTenant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_RejectTenant_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).RejectTenant(ctx, req.(*RejectTenantRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_SuspendTenant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SuspendTenantRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).SuspendTenant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_SuspendTenant_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).SuspendTenant(ctx, req.(*SuspendTenantRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_ReactivateTenant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReactivateTenantRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).ReactivateTenant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_ReactivateTenant_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).ReactivateTenant(ctx, req.(*ReactivateTenantRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_GetTenantDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTenantDetailsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).GetTenantDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_GetTenantDetails_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).GetTenantDetails(ctx, req.(*GetTenantDetailsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_UpdateTenantTrial_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTenantTrialRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).UpdateTenantTrial(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_UpdateTenantTrial_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).UpdateTenantTrial(ctx, req.(*UpdateTenantTrialRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_GetPlatformStatistics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPlatformStatisticsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).GetPlatformStatistics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_GetPlatformStatistics_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).GetPlatformStatistics(ctx, req.(*GetPlatformStatisticsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_GetTenantStatistics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTenantStatisticsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).GetTenantStatistics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_GetTenantStatistics_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).GetTenantStatistics(ctx, req.(*GetTenantStatisticsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_GetSystemHealth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSystemHealthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).GetSystemHealth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_GetSystemHealth_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).GetSystemHealth(ctx, req.(*GetSystemHealthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_GetSystemLogs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSystemLogsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).GetSystemLogs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_GetSystemLogs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).GetSystemLogs(ctx, req.(*GetSystemLogsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_GetActiveUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetActiveUsersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).GetActiveUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_GetActiveUsers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).GetActiveUsers(ctx, req.(*GetActiveUsersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_GetSystemMetrics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSystemMetricsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).GetSystemMetrics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_GetSystemMetrics_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).GetSystemMetrics(ctx, req.(*GetSystemMetricsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_BulkUpdateTenants_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BulkUpdateTenantsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).BulkUpdateTenants(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_BulkUpdateTenants_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).BulkUpdateTenants(ctx, req.(*BulkUpdateTenantsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_ExportData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExportDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).ExportData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_ExportData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).ExportData(ctx, req.(*ExportDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AdminService_ServiceDesc is the grpc.ServiceDesc for AdminService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AdminService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "admin.AdminService",
	HandlerType: (*AdminServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetPendingTenants",
			Handler:    _AdminService_GetPendingTenants_Handler,
		},
		{
			MethodName: "ApproveTenant",
			Handler:    _AdminService_ApproveTenant_Handler,
		},
		{
			MethodName: "RejectTenant",
			Handler:    _AdminService_RejectTenant_Handler,
		},
		{
			MethodName: "SuspendTenant",
			Handler:    _AdminService_SuspendTenant_Handler,
		},
		{
			MethodName: "ReactivateTenant",
			Handler:    _AdminService_ReactivateTenant_Handler,
		},
		{
			MethodName: "GetTenantDetails",
			Handler:    _AdminService_GetTenantDetails_Handler,
		},
		{
			MethodName: "UpdateTenantTrial",
			Handler:    _AdminService_UpdateTenantTrial_Handler,
		},
		{
			MethodName: "GetPlatformStatistics",
			Handler:    _AdminService_GetPlatformStatistics_Handler,
		},
		{
			MethodName: "GetTenantStatistics",
			Handler:    _AdminService_GetTenantStatistics_Handler,
		},
		{
			MethodName: "GetSystemHealth",
			Handler:    _AdminService_GetSystemHealth_Handler,
		},
		{
			MethodName: "GetSystemLogs",
			Handler:    _AdminService_GetSystemLogs_Handler,
		},
		{
			MethodName: "GetActiveUsers",
			Handler:    _AdminService_GetActiveUsers_Handler,
		},
		{
			MethodName: "GetSystemMetrics",
			Handler:    _AdminService_GetSystemMetrics_Handler,
		},
		{
			MethodName: "BulkUpdateTenants",
			Handler:    _AdminService_BulkUpdateTenants_Handler,
		},
		{
			MethodName: "ExportData",
			Handler:    _AdminService_ExportData_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "admin-service/proto/admin.proto",
}
