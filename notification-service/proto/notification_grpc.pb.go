// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: notification-service/proto/notification.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	NotificationService_SendEmail_FullMethodName               = "/notification.NotificationService/SendEmail"
	NotificationService_SendBookingConfirmation_FullMethodName = "/notification.NotificationService/SendBookingConfirmation"
	NotificationService_SendBookingReminder_FullMethodName     = "/notification.NotificationService/SendBookingReminder"
	NotificationService_SendBookingCancellation_FullMethodName = "/notification.NotificationService/SendBookingCancellation"
	NotificationService_SendSMS_FullMethodName                 = "/notification.NotificationService/SendSMS"
	NotificationService_SendVerificationCode_FullMethodName    = "/notification.NotificationService/SendVerificationCode"
	NotificationService_QueueJob_FullMethodName                = "/notification.NotificationService/QueueJob"
	NotificationService_GetJobStatus_FullMethodName            = "/notification.NotificationService/GetJobStatus"
	NotificationService_SendBulkEmails_FullMethodName          = "/notification.NotificationService/SendBulkEmails"
	NotificationService_SendBulkSMS_FullMethodName             = "/notification.NotificationService/SendBulkSMS"
)

// NotificationServiceClient is the client API for NotificationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NotificationServiceClient interface {
	// Email notifications
	SendEmail(ctx context.Context, in *SendEmailRequest, opts ...grpc.CallOption) (*SendEmailResponse, error)
	SendBookingConfirmation(ctx context.Context, in *SendBookingConfirmationRequest, opts ...grpc.CallOption) (*SendBookingConfirmationResponse, error)
	SendBookingReminder(ctx context.Context, in *SendBookingReminderRequest, opts ...grpc.CallOption) (*SendBookingReminderResponse, error)
	SendBookingCancellation(ctx context.Context, in *SendBookingCancellationRequest, opts ...grpc.CallOption) (*SendBookingCancellationResponse, error)
	// SMS notifications
	SendSMS(ctx context.Context, in *SendSMSRequest, opts ...grpc.CallOption) (*SendSMSResponse, error)
	SendVerificationCode(ctx context.Context, in *SendVerificationCodeRequest, opts ...grpc.CallOption) (*SendVerificationCodeResponse, error)
	// Background job management
	QueueJob(ctx context.Context, in *QueueJobRequest, opts ...grpc.CallOption) (*QueueJobResponse, error)
	GetJobStatus(ctx context.Context, in *GetJobStatusRequest, opts ...grpc.CallOption) (*GetJobStatusResponse, error)
	// Bulk operations
	SendBulkEmails(ctx context.Context, in *SendBulkEmailsRequest, opts ...grpc.CallOption) (*SendBulkEmailsResponse, error)
	SendBulkSMS(ctx context.Context, in *SendBulkSMSRequest, opts ...grpc.CallOption) (*SendBulkSMSResponse, error)
}

type notificationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewNotificationServiceClient(cc grpc.ClientConnInterface) NotificationServiceClient {
	return &notificationServiceClient{cc}
}

func (c *notificationServiceClient) SendEmail(ctx context.Context, in *SendEmailRequest, opts ...grpc.CallOption) (*SendEmailResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SendEmailResponse)
	err := c.cc.Invoke(ctx, NotificationService_SendEmail_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notificationServiceClient) SendBookingConfirmation(ctx context.Context, in *SendBookingConfirmationRequest, opts ...grpc.CallOption) (*SendBookingConfirmationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SendBookingConfirmationResponse)
	err := c.cc.Invoke(ctx, NotificationService_SendBookingConfirmation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notificationServiceClient) SendBookingReminder(ctx context.Context, in *SendBookingReminderRequest, opts ...grpc.CallOption) (*SendBookingReminderResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SendBookingReminderResponse)
	err := c.cc.Invoke(ctx, NotificationService_SendBookingReminder_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notificationServiceClient) SendBookingCancellation(ctx context.Context, in *SendBookingCancellationRequest, opts ...grpc.CallOption) (*SendBookingCancellationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SendBookingCancellationResponse)
	err := c.cc.Invoke(ctx, NotificationService_SendBookingCancellation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notificationServiceClient) SendSMS(ctx context.Context, in *SendSMSRequest, opts ...grpc.CallOption) (*SendSMSResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SendSMSResponse)
	err := c.cc.Invoke(ctx, NotificationService_SendSMS_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notificationServiceClient) SendVerificationCode(ctx context.Context, in *SendVerificationCodeRequest, opts ...grpc.CallOption) (*SendVerificationCodeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SendVerificationCodeResponse)
	err := c.cc.Invoke(ctx, NotificationService_SendVerificationCode_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notificationServiceClient) QueueJob(ctx context.Context, in *QueueJobRequest, opts ...grpc.CallOption) (*QueueJobResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueueJobResponse)
	err := c.cc.Invoke(ctx, NotificationService_QueueJob_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notificationServiceClient) GetJobStatus(ctx context.Context, in *GetJobStatusRequest, opts ...grpc.CallOption) (*GetJobStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetJobStatusResponse)
	err := c.cc.Invoke(ctx, NotificationService_GetJobStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notificationServiceClient) SendBulkEmails(ctx context.Context, in *SendBulkEmailsRequest, opts ...grpc.CallOption) (*SendBulkEmailsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SendBulkEmailsResponse)
	err := c.cc.Invoke(ctx, NotificationService_SendBulkEmails_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notificationServiceClient) SendBulkSMS(ctx context.Context, in *SendBulkSMSRequest, opts ...grpc.CallOption) (*SendBulkSMSResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SendBulkSMSResponse)
	err := c.cc.Invoke(ctx, NotificationService_SendBulkSMS_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NotificationServiceServer is the server API for NotificationService service.
// All implementations must embed UnimplementedNotificationServiceServer
// for forward compatibility.
type NotificationServiceServer interface {
	// Email notifications
	SendEmail(context.Context, *SendEmailRequest) (*SendEmailResponse, error)
	SendBookingConfirmation(context.Context, *SendBookingConfirmationRequest) (*SendBookingConfirmationResponse, error)
	SendBookingReminder(context.Context, *SendBookingReminderRequest) (*SendBookingReminderResponse, error)
	SendBookingCancellation(context.Context, *SendBookingCancellationRequest) (*SendBookingCancellationResponse, error)
	// SMS notifications
	SendSMS(context.Context, *SendSMSRequest) (*SendSMSResponse, error)
	SendVerificationCode(context.Context, *SendVerificationCodeRequest) (*SendVerificationCodeResponse, error)
	// Background job management
	QueueJob(context.Context, *QueueJobRequest) (*QueueJobResponse, error)
	GetJobStatus(context.Context, *GetJobStatusRequest) (*GetJobStatusResponse, error)
	// Bulk operations
	SendBulkEmails(context.Context, *SendBulkEmailsRequest) (*SendBulkEmailsResponse, error)
	SendBulkSMS(context.Context, *SendBulkSMSRequest) (*SendBulkSMSResponse, error)
	mustEmbedUnimplementedNotificationServiceServer()
}

// UnimplementedNotificationServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedNotificationServiceServer struct{}

func (UnimplementedNotificationServiceServer) SendEmail(context.Context, *SendEmailRequest) (*SendEmailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendEmail not implemented")
}
func (UnimplementedNotificationServiceServer) SendBookingConfirmation(context.Context, *SendBookingConfirmationRequest) (*SendBookingConfirmationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendBookingConfirmation not implemented")
}
func (UnimplementedNotificationServiceServer) SendBookingReminder(context.Context, *SendBookingReminderRequest) (*SendBookingReminderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendBookingReminder not implemented")
}
func (UnimplementedNotificationServiceServer) SendBookingCancellation(context.Context, *SendBookingCancellationRequest) (*SendBookingCancellationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendBookingCancellation not implemented")
}
func (UnimplementedNotificationServiceServer) SendSMS(context.Context, *SendSMSRequest) (*SendSMSResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendSMS not implemented")
}
func (UnimplementedNotificationServiceServer) SendVerificationCode(context.Context, *SendVerificationCodeRequest) (*SendVerificationCodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendVerificationCode not implemented")
}
func (UnimplementedNotificationServiceServer) QueueJob(context.Context, *QueueJobRequest) (*QueueJobResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueueJob not implemented")
}
func (UnimplementedNotificationServiceServer) GetJobStatus(context.Context, *GetJobStatusRequest) (*GetJobStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetJobStatus not implemented")
}
func (UnimplementedNotificationServiceServer) SendBulkEmails(context.Context, *SendBulkEmailsRequest) (*SendBulkEmailsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendBulkEmails not implemented")
}
func (UnimplementedNotificationServiceServer) SendBulkSMS(context.Context, *SendBulkSMSRequest) (*SendBulkSMSResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendBulkSMS not implemented")
}
func (UnimplementedNotificationServiceServer) mustEmbedUnimplementedNotificationServiceServer() {}
func (UnimplementedNotificationServiceServer) testEmbeddedByValue()                             {}

// UnsafeNotificationServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NotificationServiceServer will
// result in compilation errors.
type UnsafeNotificationServiceServer interface {
	mustEmbedUnimplementedNotificationServiceServer()
}

func RegisterNotificationServiceServer(s grpc.ServiceRegistrar, srv NotificationServiceServer) {
	// If the following call pancis, it indicates UnimplementedNotificationServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&NotificationService_ServiceDesc, srv)
}

func _NotificationService_SendEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendEmailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationServiceServer).SendEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NotificationService_SendEmail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationServiceServer).SendEmail(ctx, req.(*SendEmailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotificationService_SendBookingConfirmation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendBookingConfirmationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationServiceServer).SendBookingConfirmation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NotificationService_SendBookingConfirmation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationServiceServer).SendBookingConfirmation(ctx, req.(*SendBookingConfirmationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotificationService_SendBookingReminder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendBookingReminderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationServiceServer).SendBookingReminder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NotificationService_SendBookingReminder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationServiceServer).SendBookingReminder(ctx, req.(*SendBookingReminderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotificationService_SendBookingCancellation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendBookingCancellationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationServiceServer).SendBookingCancellation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NotificationService_SendBookingCancellation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationServiceServer).SendBookingCancellation(ctx, req.(*SendBookingCancellationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotificationService_SendSMS_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendSMSRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationServiceServer).SendSMS(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NotificationService_SendSMS_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationServiceServer).SendSMS(ctx, req.(*SendSMSRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotificationService_SendVerificationCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendVerificationCodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationServiceServer).SendVerificationCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NotificationService_SendVerificationCode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationServiceServer).SendVerificationCode(ctx, req.(*SendVerificationCodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotificationService_QueueJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueueJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationServiceServer).QueueJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NotificationService_QueueJob_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationServiceServer).QueueJob(ctx, req.(*QueueJobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotificationService_GetJobStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetJobStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationServiceServer).GetJobStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NotificationService_GetJobStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationServiceServer).GetJobStatus(ctx, req.(*GetJobStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotificationService_SendBulkEmails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendBulkEmailsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationServiceServer).SendBulkEmails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NotificationService_SendBulkEmails_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationServiceServer).SendBulkEmails(ctx, req.(*SendBulkEmailsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotificationService_SendBulkSMS_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendBulkSMSRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationServiceServer).SendBulkSMS(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NotificationService_SendBulkSMS_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationServiceServer).SendBulkSMS(ctx, req.(*SendBulkSMSRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// NotificationService_ServiceDesc is the grpc.ServiceDesc for NotificationService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NotificationService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "notification.NotificationService",
	HandlerType: (*NotificationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendEmail",
			Handler:    _NotificationService_SendEmail_Handler,
		},
		{
			MethodName: "SendBookingConfirmation",
			Handler:    _NotificationService_SendBookingConfirmation_Handler,
		},
		{
			MethodName: "SendBookingReminder",
			Handler:    _NotificationService_SendBookingReminder_Handler,
		},
		{
			MethodName: "SendBookingCancellation",
			Handler:    _NotificationService_SendBookingCancellation_Handler,
		},
		{
			MethodName: "SendSMS",
			Handler:    _NotificationService_SendSMS_Handler,
		},
		{
			MethodName: "SendVerificationCode",
			Handler:    _NotificationService_SendVerificationCode_Handler,
		},
		{
			MethodName: "QueueJob",
			Handler:    _NotificationService_QueueJob_Handler,
		},
		{
			MethodName: "GetJobStatus",
			Handler:    _NotificationService_GetJobStatus_Handler,
		},
		{
			MethodName: "SendBulkEmails",
			Handler:    _NotificationService_SendBulkEmails_Handler,
		},
		{
			MethodName: "SendBulkSMS",
			Handler:    _NotificationService_SendBulkSMS_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "notification-service/proto/notification.proto",
}
